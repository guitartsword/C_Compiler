package c_compiler;

import java_cup.runtime.*;
import java.io.FileReader;

parser code {:

	public void report_error(String errorBody, Object info) {
		StringBuffer errorHead = new StringBuffer("Error Sintactico");
			if(info instanceof java_cup.runtime.Symbol){
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0) {
					errorHead.append(" en la linea: "+(s.right+1));
					if (s.right >= 0){
						errorHead.append(", columna: "+(s.left+1));
				}
			}
			errorHead.append(" en el token: "+(s.value));
			errorHead.append(" -> "+errorBody);
		}
		System.err.println(errorHead);
	}

:}

terminal 					AND, ARRAY, BEGIN, ELSE, END, IF, NOT, OF, OR, PROGRAM, PROCEDURE,
									THEN, TYPE, VAR, TIMES, PLUS, MINUS, DIVIDE, SEMI, COMMA,
									LEFT_PAREN, RT_PAREN, LEFT_BRKT, RT_BRKT, EQ, GTR, LESS,
									LESS_EQ, GTR_EQ, NOT_EQ, COLON, ASSMNT, DOT, IDENT, INT, CHAR,
									LEFT_CB, RT_CB, COMMENT, DO, WHILE;

non terminal 			program, block, decls, decl, typedecl, vardecl, procdecl, type,
									identtype, arraytype, vars, var, identifier, prochdr, formals,
									formal, stmts, stmt, assmntstmt, designator, ifstmt, proccallstmt,
									compoundstmt, exprlist, expr, relop, addop, multop, unyop,
									integer, character, ifstmt1, identParentesis, comment, formalsp,
									ifstmt2, whilestmt, identParentesis1, varvardecl;

precedence right 	ASSMNT;
precedence left 	EQ, LESS, GTR, LESS_EQ, GTR_EQ, NOT_EQ;
precedence left 	PLUS, MINUS, OR;
precedence left 	TIMES, DIVIDE, AND;


program::= 		PROGRAM block DOT												{::}
;



block::= 			decls BEGIN stmts END									{::}
;

decls::=																					{::}
							|
							decl																{::}
							|
							decl SEMI comment decls 							{::}
;

comment::=																					{::}
							|
							COMMENT																{::}
;

decl::=				typedecl                          		{::}
							|
							vardecl																{::}
							|
							procdecl																{::}
							|
							identifier														{::}
							|
							identifier LEFT_PAREN identParentesis RT_PAREN {::}
;


identParentesis::=
											identParentesis COMMA identParentesis1  {::}
											|
											identParentesis1 {::}
;

identParentesis1::= 	identifier                        {::}
											|
											vardecl                           {::}
	;

typedecl::= 	TYPE identifier EQ type               {::}
;

type::= 			identtype 															{::}
							|
							arraytype															{::}
;

identtype::= 	identifier SEMI															{::}
;


arraytype::=	ARRAY LEFT_BRKT integer RT_BRKT OF type {::}
;

vardecl::=		VAR varvardecl										{::}
							|
							VAR vars COLON type varvardecl										{::}
							|
							VAR varvardecl vardecl										{::}
;

varvardecl::= vars COLON type										{::}
;

vars::=				comment var																				{::}
							|
							comment var COMMA vars													{::}
;

var::=				identifier																{::}
;

procdecl::=		prochdr SEMI block											{::}
;

prochdr::=		PROCEDURE identifier LEFT_PAREN formals RT_PAREN  {::}
							|
							PROCEDURE identifier LEFT_PAREN formals RT_PAREN COLON identtype  {::}
;

formals::=		formal formalsp					{::}
;

formalsp::= 	formal formalsp											{::}
							|
							{::}
;

formal::=			VAR var COLON identifier												{::}
							|
							VAR var COLON identtype  												{::}
;

stmts::=			comment stmt																			{::}
							|
							comment stmt SEMI stmts														{::}
							|
							{::}
;

stmt::=				whilestmt															{::}																				{::}
							|
							assmntstmt																{::}
							|
							ifstmt																		{::}
							|
							proccallstmt															{::}
							|
							compoundstmt															{::}

;

whilestmt::=     WHILE expr DO BEGIN stmt END {::}
;

assmntstmt::= designator ASSMNT expr										{::}
;

ifstmt::=			ifstmt1													{::}
							|
							ifstmt1 ELSE stmt								{::}
;

ifstmt1::= 			IF expr THEN														{::}
;

proccallstmt::=		identifier LEFT_PAREN exprlist RT_PAREN   {::}
;

compoundstmt::=		BEGIN stmts END												{::}
;

expr::=					integer																	{::}
								|
								character																{::}
								|
								designator															{::}
								|
								var LEFT_PAREN exprlist RT_PAREN				{::}
								|
								expr relop expr													{::}
								|
								expr addop expr													{::}
								|
								expr multop expr												{::}
								|
								unyop expr															{::}
								|
								LEFT_PAREN expr RT_PAREN								{::}

;

designator::=   var																			{::}
								|
								designator LEFT_BRKT expr RT_BRKT				{::}
;

exprlist::=			expr																		{::}
								|
								expr COMMA exprlist											{::}
;

relop::=				LESS																		{::}
								|
								GTR																			{::}
								|
								EQ																			{::}
								|
								LESS_EQ																	{::}
								|
								GTR_EQ																	{::}
								|
								NOT_EQ																	{::}
;

addop::=				PLUS																		{::}
								|
								MINUS																		{::}
								|
								OR																			{::}
;

multop::=				TIMES																		{::}
								|
								DIVIDE																	{::}
								|
								AND																			{::}
;

unyop::=				PLUS																		{::}
								|
								MINUS																		{::}
								|
								NOT																			{::}
;

identifier::=		IDENT																		{::}
;

integer::=			INT																			{::}
;

character::=		CHAR																		{::}
;
